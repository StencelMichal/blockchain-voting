package com.stencel.evoting.smartcontracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.reflection.Parameterized;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class VotingState extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_AWAITINGVALIDATIONVOTESQUEUE = "awaitingValidationVotesQueue";

    public static final String FUNC_AWAITINGVALIDATIONVOTESTAGS = "awaitingValidationVotesTags";

    public static final String FUNC_CANDIDATES = "candidates";

    public static final String FUNC_CHANGESTATETOTALLYING = "changeStateToTallying";

    public static final String FUNC_COMMONENCRYPTIONKEY = "commonEncryptionKey";

    public static final String FUNC_CONFIRMVOTEVALIDITY = "confirmVoteValidity";

    public static final String FUNC_GETALLVOTES = "getAllVotes";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_GETVOTEAWAITINGFORVALIDATION = "getVoteAwaitingForValidation";

    public static final String FUNC_GETVOTERQUESTIONS = "getVoterQuestions";

    public static final String FUNC_INITIALIZEVOTING = "initializeVoting";

    public static final String FUNC_INVALIDVOTES = "invalidVotes";

    public static final String FUNC_INVALIDATEVOTE = "invalidateVote";

    public static final String FUNC_LOGGER = "logger";

    public static final String FUNC_PUBLISHVOTINGRESULTS = "publishVotingResults";

    public static final String FUNC_RETRIEVEVOTINGRESULTS = "retrieveVotingResults";

    public static final String FUNC_STATE = "state";

    public static final String FUNC_VALIDATEDVOTES = "validatedVotes";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_VOTERQUESTIONS = "voterQuestions";

    public static final String FUNC_VOTERSPUBLICKEYS = "votersPublicKeys";

    public static final String FUNC_VOTINGRESULT = "votingResult";

    @Deprecated
    protected VotingState(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VotingState(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VotingState(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VotingState(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<RingSignature> awaitingValidationVotesQueue(String param0) {
        final Function function = new Function(FUNC_AWAITINGVALIDATIONVOTESQUEUE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<RingSignature>() {}));
        return executeRemoteCallSingleValueReturn(function, RingSignature.class);
    }

    public RemoteFunctionCall<String> awaitingValidationVotesTags(BigInteger param0) {
        final Function function = new Function(FUNC_AWAITINGVALIDATIONVOTESTAGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> candidates(BigInteger param0) {
        final Function function = new Function(FUNC_CANDIDATES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> changeStateToTallying() {
        final Function function = new Function(
                FUNC_CHANGESTATETOTALLYING, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, String>> commonEncryptionKey() {
        final Function function = new Function(FUNC_COMMONENCRYPTIONKEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> confirmVoteValidity(Vote validatedVote) {
        final Function function = new Function(
                FUNC_CONFIRMVOTEVALIDITY, 
                Arrays.<Type>asList(validatedVote), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllVotes() {
        final Function function = new Function(FUNC_GETALLVOTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Vote>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getCandidates() {
        final Function function = new Function(FUNC_GETCANDIDATES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Vote> getVoteAwaitingForValidation() {
        final Function function = new Function(FUNC_GETVOTEAWAITINGFORVALIDATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Vote>() {}));
        return executeRemoteCallSingleValueReturn(function, Vote.class);
    }

    public RemoteFunctionCall<List> getVoterQuestions() {
        final Function function = new Function(FUNC_GETVOTERQUESTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initializeVoting(PaillierPublicKey key, List<String> _candidates, List<String> _voterQuestions, List<RsaPublicKey> _votersPublicKeys, List<String> _sealersAddresses, List<String> _votersAddresses) {
        final Function function = new Function(
                FUNC_INITIALIZEVOTING, 
                Arrays.<Type>asList(key, 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_candidates, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_voterQuestions, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.DynamicArray<RsaPublicKey>(RsaPublicKey.class, _votersPublicKeys), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_sealersAddresses, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_votersAddresses, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<RingSignature> invalidVotes(BigInteger param0) {
        final Function function = new Function(FUNC_INVALIDVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<RingSignature>() {}));
        return executeRemoteCallSingleValueReturn(function, RingSignature.class);
    }

    public RemoteFunctionCall<TransactionReceipt> invalidateVote(Vote invalidVote) {
        final Function function = new Function(
                FUNC_INVALIDATEVOTE, 
                Arrays.<Type>asList(invalidVote), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> logger(BigInteger param0) {
        final Function function = new Function(FUNC_LOGGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> publishVotingResults(VotingResult result) {
        final Function function = new Function(
                FUNC_PUBLISHVOTINGRESULTS, 
                Arrays.<Type>asList(result), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<VotingResult> retrieveVotingResults() {
        final Function function = new Function(FUNC_RETRIEVEVOTINGRESULTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<VotingResult>() {}));
        return executeRemoteCallSingleValueReturn(function, VotingResult.class);
    }

    public RemoteFunctionCall<BigInteger> state() {
        final Function function = new Function(FUNC_STATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<RingSignature> validatedVotes(BigInteger param0) {
        final Function function = new Function(FUNC_VALIDATEDVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<RingSignature>() {}));
        return executeRemoteCallSingleValueReturn(function, RingSignature.class);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(Vote newVote) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(newVote), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> voterQuestions(BigInteger param0) {
        final Function function = new Function(FUNC_VOTERQUESTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<String, String>> votersPublicKeys(BigInteger param0) {
        final Function function = new Function(FUNC_VOTERSPUBLICKEYS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> votingResult() {
        final Function function = new Function(FUNC_VOTINGRESULT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static VotingState load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingState(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VotingState load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingState(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VotingState load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VotingState(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VotingState load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VotingState(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VotingState> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _bootnodeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _bootnodeAddress)));
        return deployRemoteCall(VotingState.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<VotingState> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _bootnodeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _bootnodeAddress)));
        return deployRemoteCall(VotingState.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<VotingState> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _bootnodeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _bootnodeAddress)));
        return deployRemoteCall(VotingState.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<VotingState> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _bootnodeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _bootnodeAddress)));
        return deployRemoteCall(VotingState.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class RingSignature extends DynamicStruct {
        public String startValue;

        public List<String> moduluses_base64;

        public List<String> exponents_base64;

        public List<String> ringValues;

        public String tag;

        public RingSignature(String startValue, List<String> moduluses_base64, List<String> exponents_base64, List<String> ringValues, String tag) {
            super(new org.web3j.abi.datatypes.Utf8String(startValue), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(moduluses_base64, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(exponents_base64, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(ringValues, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.Utf8String(tag));
            this.startValue = startValue;
            this.moduluses_base64 = moduluses_base64;
            this.exponents_base64 = exponents_base64;
            this.ringValues = ringValues;
            this.tag = tag;
        }

        public RingSignature(Utf8String startValue, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> moduluses_base64, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> exponents_base64, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> ringValues, Utf8String tag) {
            super(startValue, moduluses_base64, exponents_base64, ringValues, tag);
            this.startValue = startValue.getValue();
            this.moduluses_base64 = moduluses_base64.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.exponents_base64 = exponents_base64.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.ringValues = ringValues.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.tag = tag.getValue();
        }
    }

    public static class PaillierPublicKey extends DynamicStruct {
        public String n_base64;

        public String g_base64;

        public PaillierPublicKey(String n_base64, String g_base64) {
            super(new org.web3j.abi.datatypes.Utf8String(n_base64), 
                    new org.web3j.abi.datatypes.Utf8String(g_base64));
            this.n_base64 = n_base64;
            this.g_base64 = g_base64;
        }

        public PaillierPublicKey(Utf8String n_base64, Utf8String g_base64) {
            super(n_base64, g_base64);
            this.n_base64 = n_base64.getValue();
            this.g_base64 = g_base64.getValue();
        }
    }

    public static class RsaPublicKey extends DynamicStruct {
        public String modulus_base64;

        public String exponent_base64;

        public RsaPublicKey(String modulus_base64, String exponent_base64) {
            super(new org.web3j.abi.datatypes.Utf8String(modulus_base64), 
                    new org.web3j.abi.datatypes.Utf8String(exponent_base64));
            this.modulus_base64 = modulus_base64;
            this.exponent_base64 = exponent_base64;
        }

        public RsaPublicKey(Utf8String modulus_base64, Utf8String exponent_base64) {
            super(modulus_base64, exponent_base64);
            this.modulus_base64 = modulus_base64.getValue();
            this.exponent_base64 = exponent_base64.getValue();
        }
    }

    public static class VotingResult extends DynamicStruct {
        public BigInteger totalVotes;

        public List<BigInteger> votes;

        public VotingResult(BigInteger totalVotes, List<BigInteger> votes) {
            super(new org.web3j.abi.datatypes.generated.Uint256(totalVotes), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                            org.web3j.abi.datatypes.generated.Uint256.class,
                            org.web3j.abi.Utils.typeMap(votes, org.web3j.abi.datatypes.generated.Uint256.class)));
            this.totalVotes = totalVotes;
            this.votes = votes;
        }

        public VotingResult(Uint256 totalVotes, @Parameterized(type = Uint256.class) DynamicArray<Uint256> votes) {
            super(totalVotes, votes);
            this.totalVotes = totalVotes.getValue();
            this.votes = votes.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
        }
    }

    public static class Vote extends DynamicStruct {
        public List<String> encryptedVotes;

        public List<BigInteger> encryptedExponents;

        public List<String> voterEncryptedAnswers;

        public List<BigInteger> encodedAnswersExponents;

        public RingSignature ringSignature;

        public Vote(List<String> encryptedVotes, List<BigInteger> encryptedExponents, List<String> voterEncryptedAnswers, List<BigInteger> encodedAnswersExponents, RingSignature ringSignature) {
            super(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(encryptedVotes, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                            org.web3j.abi.datatypes.generated.Uint256.class,
                            org.web3j.abi.Utils.typeMap(encryptedExponents, org.web3j.abi.datatypes.generated.Uint256.class)), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(voterEncryptedAnswers, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                            org.web3j.abi.datatypes.generated.Uint256.class,
                            org.web3j.abi.Utils.typeMap(encodedAnswersExponents, org.web3j.abi.datatypes.generated.Uint256.class)), 
                    ringSignature);
            this.encryptedVotes = encryptedVotes;
            this.encryptedExponents = encryptedExponents;
            this.voterEncryptedAnswers = voterEncryptedAnswers;
            this.encodedAnswersExponents = encodedAnswersExponents;
            this.ringSignature = ringSignature;
        }

        public Vote(@Parameterized(type = Utf8String.class) DynamicArray<Utf8String> encryptedVotes, @Parameterized(type = Uint256.class) DynamicArray<Uint256> encryptedExponents, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> voterEncryptedAnswers, @Parameterized(type = Uint256.class) DynamicArray<Uint256> encodedAnswersExponents, RingSignature ringSignature) {
            super(encryptedVotes, encryptedExponents, voterEncryptedAnswers, encodedAnswersExponents, ringSignature);
            this.encryptedVotes = encryptedVotes.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.encryptedExponents = encryptedExponents.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.voterEncryptedAnswers = voterEncryptedAnswers.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.encodedAnswersExponents = encodedAnswersExponents.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.ringSignature = ringSignature;
        }
    }
}
