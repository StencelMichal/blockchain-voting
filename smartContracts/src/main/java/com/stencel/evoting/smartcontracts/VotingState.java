package com.stencel.evoting.smartcontracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.reflection.Parameterized;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class VotingState extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5061302e806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806396fa60ea116100ad578063c1b3f89911610071578063c1b3f89914610370578063c53187c11461038c578063e3c763cb14610396578063f6b238c3146103c6578063fe290ccb146103e55761012c565b806396fa60ea146102b557806399a6a9eb146102e5578063a5918f6b14610303578063b56e54f014610321578063c19d93fb146103525761012c565b80633d4b9204116100f45780633d4b9204146101eb5780633ff302641461021b5780635df813301461024b57806388cea9521461027b5780639486baae146102ab5761012c565b806306a49fce1461013157806309bd5a601461014f5780632333c6e01461016f5780633477ee2e1461018b5780633a264928146101bb575b600080fd5b610139610403565b6040516101469190611b7e565b60405180910390f35b6101576104dc565b60405161016693929190611c29565b60405180910390f35b61018960048036038101906101849190612010565b610589565b005b6101a560048036038101906101a09190612085565b6106e0565b6040516101b291906120fc565b60405180910390f35b6101d560048036038101906101d09190612085565b61078c565b6040516101e291906120fc565b60405180910390f35b610205600480360381019061020091906121bf565b610838565b6040516102129190612237565b60405180910390f35b6102356004803603810190610230919061228f565b610979565b60405161024291906120fc565b60405180910390f35b61026560048036038101906102609190612085565b610b96565b60405161027291906123a0565b60405180910390f35b61029560048036038101906102909190612085565b610dcb565b6040516102a291906120fc565b60405180910390f35b6102b3610e77565b005b6102cf60048036038101906102ca9190612085565b610ede565b6040516102dc9190612406565b60405180910390f35b6102ed61103e565b6040516102fa9190611b7e565b60405180910390f35b61030b611117565b604051610318919061252e565b60405180910390f35b61033b60048036038101906103369190612085565b61129a565b604051610349929190612550565b60405180910390f35b61035a6113de565b60405161036791906125fe565b60405180910390f35b61038a6004803603810190610385919061280a565b6113f1565b005b610394611516565b005b6103b060048036038101906103ab91906128e1565b611518565b6040516103bd91906120fc565b60405180910390f35b6103ce61173d565b6040516103dc929190612550565b60405180910390f35b6103ed61185f565b6040516103fa9190611b7e565b60405180910390f35b60606007805480602002602001604051908101604052809291908181526020016000905b828210156104d357838290600052602060002001805461044690612959565b80601f016020809104026020016040519081016040528092919081815260200182805461047290612959565b80156104bf5780601f10610494576101008083540402835291602001916104bf565b820191906000526020600020905b8154815290600101906020018083116104a257829003601f168201915b505050505081526020019060010190610427565b50505050905090565b60018060000180546104ed90612959565b80601f016020809104026020016040519081016040528092919081815260200182805461051990612959565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b5050505050908060010160009054906101000a900460ff16908060020154905083565b600780549050816000015151146105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc906129d6565b60405180910390fd5b60098054905081602001515114610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890612a42565b60405180910390fd5b60008190806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000019080519060200190610669929190611938565b506020820151816001019080519060200190610686929190611938565b5060408201518160020160008201518160000190816106a59190612c0e565b5060208201518160010190805190602001906106c2929190611938565b5060408201518160020190816106d89190612c0e565b505050505050565b600781815481106106f057600080fd5b90600052602060002001600091509050805461070b90612959565b80601f016020809104026020016040519081016040528092919081815260200182805461073790612959565b80156107845780601f1061075957610100808354040283529160200191610784565b820191906000526020600020905b81548152906001019060200180831161076757829003601f168201915b505050505081565b6004818154811061079c57600080fd5b9060005260206000200160009150905080546107b790612959565b80601f01602080910402602001604051908101604052809291908181526020018280546107e390612959565b80156108305780601f1061080557610100808354040283529160200191610830565b820191906000526020600020905b81548152906001019060200180831161081357829003601f168201915b505050505081565b6060815183511461087e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087590612d2c565b60405180910390fd5b6000835167ffffffffffffffff81111561089b5761089a611c80565b5b6040519080825280601f01601f1916602001820160405280156108cd5781602001600182028036833780820191505090505b50905060005b845181101561096e578381815181106108ef576108ee612d4c565b5b602001015160f81c60f81b85828151811061090d5761090c612d4c565b5b602001015160f81c60f81b1882828151811061092c5761092b612d4c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061096690612daa565b9150506108d3565b508091505092915050565b606060006002602061098b9190612dff565b60ff1667ffffffffffffffff8111156109a7576109a6611c80565b5b6040519080825280601f01601f1916602001820160405280156109d95781602001600182028036833780820191505090505b50905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060005b602060ff16811015610b6c57818251868360208110610a3b57610a3a612d4c565b5b1a60f81b60f81c60ff16610a4f9190612e6b565b81518110610a6057610a5f612d4c565b5b602001015160f81c60f81b83600283610a799190612e9c565b81518110610a8a57610a89612d4c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868360208110610acf57610ace612d4c565b5b1a60f81b60f81c60ff16610ae39190612ede565b81518110610af457610af3612d4c565b5b602001015160f81c60f81b836001600284610b0f9190612e9c565b610b199190612f0f565b81518110610b2a57610b29612d4c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610b6490612daa565b915050610a19565b5081604051602001610b7e9190612fd6565b60405160208183030381529060405292505050919050565b60008181548110610ba657600080fd5b906000526020600020906005020160009150905080600201604051806060016040529081600082018054610bd990612959565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0590612959565b8015610c525780601f10610c2757610100808354040283529160200191610c52565b820191906000526020600020905b815481529060010190602001808311610c3557829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610d2c578382906000526020600020018054610c9f90612959565b80601f0160208091040260200160405190810160405280929190818152602001828054610ccb90612959565b8015610d185780601f10610ced57610100808354040283529160200191610d18565b820191906000526020600020905b815481529060010190602001808311610cfb57829003601f168201915b505050505081526020019060010190610c80565b505050508152602001600282018054610d4490612959565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7090612959565b8015610dbd5780601f10610d9257610100808354040283529160200191610dbd565b820191906000526020600020905b815481529060010190602001808311610da057829003601f168201915b505050505081525050905081565b60098181548110610ddb57600080fd5b906000526020600020016000915090508054610df690612959565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2290612959565b8015610e6f5780601f10610e4457610100808354040283529160200191610e6f565b820191906000526020600020905b815481529060010190602001808311610e5257829003601f168201915b505050505081565b600067ffffffffffffffff811115610e9257610e91611c80565b5b604051908082528060200260200182016040528015610ec557816020015b6060815260200190600190039081610eb05790505b5060049080519060200190610edb929190611938565b50565b610ee6611991565b600a8281548110610efa57610ef9612d4c565b5b9060005260206000209060020201604051806040016040529081600082018054610f2390612959565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4f90612959565b8015610f9c5780601f10610f7157610100808354040283529160200191610f9c565b820191906000526020600020905b815481529060010190602001808311610f7f57829003601f168201915b50505050508152602001600182018054610fb590612959565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe190612959565b801561102e5780601f106110035761010080835404028352916020019161102e565b820191906000526020600020905b81548152906001019060200180831161101157829003601f168201915b5050505050815250509050919050565b60606009805480602002602001604051908101604052809291908181526020016000905b8282101561110e57838290600052602060002001805461108190612959565b80601f01602080910402602001604051908101604052809291908181526020018280546110ad90612959565b80156110fa5780601f106110cf576101008083540402835291602001916110fa565b820191906000526020600020905b8154815290600101906020018083116110dd57829003601f168201915b505050505081526020019060010190611062565b50505050905090565b6060600a805480602002602001604051908101604052809291908181526020016000905b82821015611291578382906000526020600020906002020160405180604001604052908160008201805461116e90612959565b80601f016020809104026020016040519081016040528092919081815260200182805461119a90612959565b80156111e75780601f106111bc576101008083540402835291602001916111e7565b820191906000526020600020905b8154815290600101906020018083116111ca57829003601f168201915b5050505050815260200160018201805461120090612959565b80601f016020809104026020016040519081016040528092919081815260200182805461122c90612959565b80156112795780601f1061124e57610100808354040283529160200191611279565b820191906000526020600020905b81548152906001019060200180831161125c57829003601f168201915b5050505050815250508152602001906001019061113b565b50505050905090565b600a81815481106112aa57600080fd5b90600052602060002090600202016000915090508060000180546112cd90612959565b80601f01602080910402602001604051908101604052809291908181526020018280546112f990612959565b80156113465780601f1061131b57610100808354040283529160200191611346565b820191906000526020600020905b81548152906001019060200180831161132957829003601f168201915b50505050509080600101805461135b90612959565b80601f016020809104026020016040519081016040528092919081815260200182805461138790612959565b80156113d45780601f106113a9576101008083540402835291602001916113d4565b820191906000526020600020905b8154815290600101906020018083116113b757829003601f168201915b5050505050905082565b600860009054906101000a900460ff1681565b83600560008201518160000190816114099190612c0e565b50602082015181600101908161141f9190612c0e565b509050508260079080519060200190611439929190611938565b508160099080519060200190611450929190611938565b5060005b81518110156114e457600a82828151811061147257611471612d4c565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190816114b89190612c0e565b5060208201518160010190816114ce9190612c0e565b50505080806114dc90612daa565b915050611454565b506001600860006101000a81548160ff0219169083600281111561150b5761150a612587565b5b021790555050505050565b565b606060006002835161152a9190612e9c565b67ffffffffffffffff81111561154357611542611c80565b5b6040519080825280601f01601f1916602001820160405280156115755781602001600182028036833780820191505090505b50905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060005b8451811015611713578182518683815181106115d4576115d3612d4c565b5b602001015160f81c60f81b60f81c60ff166115ef9190612e6b565b81518110611600576115ff612d4c565b5b602001015160f81c60f81b836002836116199190612e9c565b8151811061162a57611629612d4c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081825186838151811061166f5761166e612d4c565b5b602001015160f81c60f81b60f81c60ff1661168a9190612ede565b8151811061169b5761169a612d4c565b5b602001015160f81c60f81b8360016002846116b69190612e9c565b6116c09190612f0f565b815181106116d1576116d0612d4c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061170b90612daa565b9150506115b5565b50816040516020016117259190612fd6565b60405160208183030381529060405292505050919050565b600580600001805461174e90612959565b80601f016020809104026020016040519081016040528092919081815260200182805461177a90612959565b80156117c75780601f1061179c576101008083540402835291602001916117c7565b820191906000526020600020905b8154815290600101906020018083116117aa57829003601f168201915b5050505050908060010180546117dc90612959565b80601f016020809104026020016040519081016040528092919081815260200182805461180890612959565b80156118555780601f1061182a57610100808354040283529160200191611855565b820191906000526020600020905b81548152906001019060200180831161183857829003601f168201915b5050505050905082565b60606004805480602002602001604051908101604052809291908181526020016000905b8282101561192f5783829060005260206000200180546118a290612959565b80601f01602080910402602001604051908101604052809291908181526020018280546118ce90612959565b801561191b5780601f106118f05761010080835404028352916020019161191b565b820191906000526020600020905b8154815290600101906020018083116118fe57829003601f168201915b505050505081526020019060010190611883565b50505050905090565b828054828255906000526020600020908101928215611980579160200282015b8281111561197f57825182908161196f9190612c0e565b5091602001919060010190611958565b5b50905061198d91906119ab565b5090565b604051806040016040528060608152602001606081525090565b5b808211156119cb57600081816119c291906119cf565b506001016119ac565b5090565b5080546119db90612959565b6000825580601f106119ed5750611a0c565b601f016020900490600052602060002090810190611a0b9190611a0f565b5b50565b5b80821115611a28576000816000905550600101611a10565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a92578082015181840152602081019050611a77565b60008484015250505050565b6000601f19601f8301169050919050565b6000611aba82611a58565b611ac48185611a63565b9350611ad4818560208601611a74565b611add81611a9e565b840191505092915050565b6000611af48383611aaf565b905092915050565b6000602082019050919050565b6000611b1482611a2c565b611b1e8185611a37565b935083602082028501611b3085611a48565b8060005b85811015611b6c5784840389528151611b4d8582611ae8565b9450611b5883611afc565b925060208a01995050600181019050611b34565b50829750879550505050505092915050565b60006020820190508181036000830152611b988184611b09565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000611bc782611ba0565b611bd18185611bab565b9350611be1818560208601611a74565b611bea81611a9e565b840191505092915050565b60008115159050919050565b611c0a81611bf5565b82525050565b6000819050919050565b611c2381611c10565b82525050565b60006060820190508181036000830152611c438186611bbc565b9050611c526020830185611c01565b611c5f6040830184611c1a565b949350505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611cb882611a9e565b810181811067ffffffffffffffff82111715611cd757611cd6611c80565b5b80604052505050565b6000611cea611c67565b9050611cf68282611caf565b919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611d2057611d1f611c80565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611d5657611d55611c80565b5b611d5f82611a9e565b9050602081019050919050565b82818337600083830152505050565b6000611d8e611d8984611d3b565b611ce0565b905082815260208101848484011115611daa57611da9611d36565b5b611db5848285611d6c565b509392505050565b600082601f830112611dd257611dd1611d00565b5b8135611de2848260208601611d7b565b91505092915050565b6000611dfe611df984611d05565b611ce0565b90508083825260208201905060208402830185811115611e2157611e20611d31565b5b835b81811015611e6857803567ffffffffffffffff811115611e4657611e45611d00565b5b808601611e538982611dbd565b85526020850194505050602081019050611e23565b5050509392505050565b600082601f830112611e8757611e86611d00565b5b8135611e97848260208601611deb565b91505092915050565b600060608284031215611eb657611eb5611c7b565b5b611ec06060611ce0565b9050600082013567ffffffffffffffff811115611ee057611edf611cfb565b5b611eec84828501611dbd565b600083015250602082013567ffffffffffffffff811115611f1057611f0f611cfb565b5b611f1c84828501611e72565b602083015250604082013567ffffffffffffffff811115611f4057611f3f611cfb565b5b611f4c84828501611dbd565b60408301525092915050565b600060608284031215611f6e57611f6d611c7b565b5b611f786060611ce0565b9050600082013567ffffffffffffffff811115611f9857611f97611cfb565b5b611fa484828501611e72565b600083015250602082013567ffffffffffffffff811115611fc857611fc7611cfb565b5b611fd484828501611e72565b602083015250604082013567ffffffffffffffff811115611ff857611ff7611cfb565b5b61200484828501611ea0565b60408301525092915050565b60006020828403121561202657612025611c71565b5b600082013567ffffffffffffffff81111561204457612043611c76565b5b61205084828501611f58565b91505092915050565b61206281611c10565b811461206d57600080fd5b50565b60008135905061207f81612059565b92915050565b60006020828403121561209b5761209a611c71565b5b60006120a984828501612070565b91505092915050565b600082825260208201905092915050565b60006120ce82611a58565b6120d881856120b2565b93506120e8818560208601611a74565b6120f181611a9e565b840191505092915050565b6000602082019050818103600083015261211681846120c3565b905092915050565b600067ffffffffffffffff82111561213957612138611c80565b5b61214282611a9e565b9050602081019050919050565b600061216261215d8461211e565b611ce0565b90508281526020810184848401111561217e5761217d611d36565b5b612189848285611d6c565b509392505050565b600082601f8301126121a6576121a5611d00565b5b81356121b684826020860161214f565b91505092915050565b600080604083850312156121d6576121d5611c71565b5b600083013567ffffffffffffffff8111156121f4576121f3611c76565b5b61220085828601612191565b925050602083013567ffffffffffffffff81111561222157612220611c76565b5b61222d85828601612191565b9150509250929050565b600060208201905081810360008301526122518184611bbc565b905092915050565b6000819050919050565b61226c81612259565b811461227757600080fd5b50565b60008135905061228981612263565b92915050565b6000602082840312156122a5576122a4611c71565b5b60006122b38482850161227a565b91505092915050565b600082825260208201905092915050565b60006122d882611a2c565b6122e281856122bc565b9350836020820285016122f485611a48565b8060005b8581101561233057848403895281516123118582611ae8565b945061231c83611afc565b925060208a019950506001810190506122f8565b50829750879550505050505092915050565b6000606083016000830151848203600086015261235f8282611aaf565b9150506020830151848203602086015261237982826122cd565b915050604083015184820360408601526123938282611aaf565b9150508091505092915050565b600060208201905081810360008301526123ba8184612342565b905092915050565b600060408301600083015184820360008601526123df8282611aaf565b915050602083015184820360208601526123f98282611aaf565b9150508091505092915050565b6000602082019050818103600083015261242081846123c2565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060408301600083015184820360008601526124718282611aaf565b9150506020830151848203602086015261248b8282611aaf565b9150508091505092915050565b60006124a48383612454565b905092915050565b6000602082019050919050565b60006124c482612428565b6124ce8185612433565b9350836020820285016124e085612444565b8060005b8581101561251c57848403895281516124fd8582612498565b9450612508836124ac565b925060208a019950506001810190506124e4565b50829750879550505050505092915050565b6000602082019050818103600083015261254881846124b9565b905092915050565b6000604082019050818103600083015261256a81856120c3565b9050818103602083015261257e81846120c3565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106125c7576125c6612587565b5b50565b60008190506125d8826125b6565b919050565b60006125e8826125ca565b9050919050565b6125f8816125dd565b82525050565b600060208201905061261360008301846125ef565b92915050565b60006040828403121561262f5761262e611c7b565b5b6126396040611ce0565b9050600082013567ffffffffffffffff81111561265957612658611cfb565b5b61266584828501611dbd565b600083015250602082013567ffffffffffffffff81111561268957612688611cfb565b5b61269584828501611dbd565b60208301525092915050565b600067ffffffffffffffff8211156126bc576126bb611c80565b5b602082029050602081019050919050565b6000604082840312156126e3576126e2611c7b565b5b6126ed6040611ce0565b9050600082013567ffffffffffffffff81111561270d5761270c611cfb565b5b61271984828501611dbd565b600083015250602082013567ffffffffffffffff81111561273d5761273c611cfb565b5b61274984828501611dbd565b60208301525092915050565b6000612768612763846126a1565b611ce0565b9050808382526020820190506020840283018581111561278b5761278a611d31565b5b835b818110156127d257803567ffffffffffffffff8111156127b0576127af611d00565b5b8086016127bd89826126cd565b8552602085019450505060208101905061278d565b5050509392505050565b600082601f8301126127f1576127f0611d00565b5b8135612801848260208601612755565b91505092915050565b6000806000806080858703121561282457612823611c71565b5b600085013567ffffffffffffffff81111561284257612841611c76565b5b61284e87828801612619565b945050602085013567ffffffffffffffff81111561286f5761286e611c76565b5b61287b87828801611e72565b935050604085013567ffffffffffffffff81111561289c5761289b611c76565b5b6128a887828801611e72565b925050606085013567ffffffffffffffff8111156128c9576128c8611c76565b5b6128d5878288016127dc565b91505092959194509250565b6000602082840312156128f7576128f6611c71565b5b600082013567ffffffffffffffff81111561291557612914611c76565b5b61292184828501612191565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061297157607f821691505b6020821081036129845761298361292a565b5b50919050565b7f496e76616c696420766f746520636f6e74656e74206c656e6774680000000000600082015250565b60006129c0601b836120b2565b91506129cb8261298a565b602082019050919050565b600060208201905081810360008301526129ef816129b3565b9050919050565b7f496e76616c696420616e7377657273206c656e67746800000000000000000000600082015250565b6000612a2c6016836120b2565b9150612a37826129f6565b602082019050919050565b60006020820190508181036000830152612a5b81612a1f565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612ac47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612a87565b612ace8683612a87565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612b0b612b06612b0184611c10565b612ae6565b611c10565b9050919050565b6000819050919050565b612b2583612af0565b612b39612b3182612b12565b848454612a94565b825550505050565b600090565b612b4e612b41565b612b59818484612b1c565b505050565b5b81811015612b7d57612b72600082612b46565b600181019050612b5f565b5050565b601f821115612bc257612b9381612a62565b612b9c84612a77565b81016020851015612bab578190505b612bbf612bb785612a77565b830182612b5e565b50505b505050565b600082821c905092915050565b6000612be560001984600802612bc7565b1980831691505092915050565b6000612bfe8383612bd4565b9150826002028217905092915050565b612c1782611a58565b67ffffffffffffffff811115612c3057612c2f611c80565b5b612c3a8254612959565b612c45828285612b81565b600060209050601f831160018114612c785760008415612c66578287015190505b612c708582612bf2565b865550612cd8565b601f198416612c8686612a62565b60005b82811015612cae57848901518255600182019150602085019450602081019050612c89565b86831015612ccb5784890151612cc7601f891682612bd4565b8355505b6001600288020188555050505b505050505050565b7f417272617973206d757374206265206f6620657175616c206c656e6774680000600082015250565b6000612d16601e836120b2565b9150612d2182612ce0565b602082019050919050565b60006020820190508181036000830152612d4581612d09565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612db582611c10565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612de757612de6612d7b565b5b600182019050919050565b600060ff82169050919050565b6000612e0a82612df2565b9150612e1583612df2565b9250828202612e2381612df2565b9150808214612e3557612e34612d7b565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e7682611c10565b9150612e8183611c10565b925082612e9157612e90612e3c565b5b828204905092915050565b6000612ea782611c10565b9150612eb283611c10565b9250828202612ec081611c10565b91508282048414831517612ed757612ed6612d7b565b5b5092915050565b6000612ee982611c10565b9150612ef483611c10565b925082612f0457612f03612e3c565b5b828206905092915050565b6000612f1a82611c10565b9150612f2583611c10565b9250828201905080821115612f3d57612f3c612d7b565b5b92915050565b600081905092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b6000612f84600283612f43565b9150612f8f82612f4e565b600282019050919050565b600081905092915050565b6000612fb082611ba0565b612fba8185612f9a565b9350612fca818560208601611a74565b80840191505092915050565b6000612fe182612f77565b9150612fed8284612fa5565b91508190509291505056fea26469706673582212200aea346089a4d40a3c0fd60035c35f34367a15d1c30fe953f36cb40870c8a0b364736f6c63430008110033";

    public static final String FUNC_CANDIDATES = "candidates";

    public static final String FUNC_CLEARLOGS = "clearLogs";

    public static final String FUNC_COMMONENCRYPTIONKEY = "commonEncryptionKey";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_GETLOGS = "getLogs";

    public static final String FUNC_GETVOTERQUESTIONS = "getVoterQuestions";

    public static final String FUNC_GETVOTERSPUBLICKEY = "getVotersPublicKey";

    public static final String FUNC_GETVOTERSPUBLICKEYSS = "getVotersPublicKeyss";

    public static final String FUNC_HASH = "hash";

    public static final String FUNC_ITOHEX = "iToHex";

    public static final String FUNC_ITOHEX2 = "iToHex2";

    public static final String FUNC_INITIALIZEVOTING = "initializeVoting";

    public static final String FUNC_LOGGER = "logger";

    public static final String FUNC_STATE = "state";

    public static final String FUNC_TESTBIGNUMBERS = "testBigNumbers";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_VOTERQUESTIONS = "voterQuestions";

    public static final String FUNC_VOTERSPUBLICKEYS = "votersPublicKeys";

    public static final String FUNC_VOTES = "votes";

    public static final String FUNC_XORBYTEARRAYS = "xorByteArrays";

    @Deprecated
    protected VotingState(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VotingState(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VotingState(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VotingState(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> candidates(BigInteger param0) {
        final Function function = new Function(FUNC_CANDIDATES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> clearLogs() {
        final Function function = new Function(
                FUNC_CLEARLOGS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, String>> commonEncryptionKey() {
        final Function function = new Function(FUNC_COMMONENCRYPTIONKEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getCandidates() {
        final Function function = new Function(FUNC_GETCANDIDATES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getLogs() {
        final Function function = new Function(FUNC_GETLOGS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getVoterQuestions() {
        final Function function = new Function(FUNC_GETVOTERQUESTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<RsaPublicKey> getVotersPublicKey(BigInteger id) {
        final Function function = new Function(FUNC_GETVOTERSPUBLICKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<RsaPublicKey>() {}));
        return executeRemoteCallSingleValueReturn(function, RsaPublicKey.class);
    }

    public RemoteFunctionCall<List> getVotersPublicKeyss() {
        final Function function = new Function(FUNC_GETVOTERSPUBLICKEYSS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<RsaPublicKey>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<byte[], Boolean, BigInteger>> hash() {
        final Function function = new Function(FUNC_HASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<byte[], Boolean, BigInteger>>(function,
                new Callable<Tuple3<byte[], Boolean, BigInteger>>() {
                    @Override
                    public Tuple3<byte[], Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], Boolean, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> iToHex(byte[] buffer) {
        final Function function = new Function(FUNC_ITOHEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(buffer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> iToHex2(byte[] buffer) {
        final Function function = new Function(FUNC_ITOHEX2, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(buffer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initializeVoting(PaillierPublicKey key, List<String> _candidates, List<String> _voterQuestions, List<RsaPublicKey> _votersPublicKeys) {
        final Function function = new Function(
                FUNC_INITIALIZEVOTING, 
                Arrays.<Type>asList(key, 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_candidates, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_voterQuestions, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.DynamicArray<RsaPublicKey>(RsaPublicKey.class, _votersPublicKeys)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> logger(BigInteger param0) {
        final Function function = new Function(FUNC_LOGGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> state() {
        final Function function = new Function(FUNC_STATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> testBigNumbers() {
        final Function function = new Function(
                FUNC_TESTBIGNUMBERS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(Vote newVote) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(newVote), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> voterQuestions(BigInteger param0) {
        final Function function = new Function(FUNC_VOTERQUESTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<String, String>> votersPublicKeys(BigInteger param0) {
        final Function function = new Function(FUNC_VOTERSPUBLICKEYS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<RingSignature> votes(BigInteger param0) {
        final Function function = new Function(FUNC_VOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<RingSignature>() {}));
        return executeRemoteCallSingleValueReturn(function, RingSignature.class);
    }

    public RemoteFunctionCall<byte[]> xorByteArrays(byte[] arr1, byte[] arr2) {
        final Function function = new Function(FUNC_XORBYTEARRAYS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(arr1), 
                new org.web3j.abi.datatypes.DynamicBytes(arr2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    @Deprecated
    public static VotingState load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingState(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VotingState load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingState(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VotingState load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VotingState(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VotingState load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VotingState(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VotingState> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingState.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VotingState> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingState.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<VotingState> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingState.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VotingState> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingState.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class RsaPublicKey extends DynamicStruct {
        public String modulus_base64;

        public String exponent_base64;

        public RsaPublicKey(String modulus_base64, String exponent_base64) {
            super(new org.web3j.abi.datatypes.Utf8String(modulus_base64), 
                    new org.web3j.abi.datatypes.Utf8String(exponent_base64));
            this.modulus_base64 = modulus_base64;
            this.exponent_base64 = exponent_base64;
        }

        public RsaPublicKey(Utf8String modulus_base64, Utf8String exponent_base64) {
            super(modulus_base64, exponent_base64);
            this.modulus_base64 = modulus_base64.getValue();
            this.exponent_base64 = exponent_base64.getValue();
        }
    }

    public static class PaillierPublicKey extends DynamicStruct {
        public String n_base64;

        public String g_base64;

        public PaillierPublicKey(String n_base64, String g_base64) {
            super(new org.web3j.abi.datatypes.Utf8String(n_base64), 
                    new org.web3j.abi.datatypes.Utf8String(g_base64));
            this.n_base64 = n_base64;
            this.g_base64 = g_base64;
        }

        public PaillierPublicKey(Utf8String n_base64, Utf8String g_base64) {
            super(n_base64, g_base64);
            this.n_base64 = n_base64.getValue();
            this.g_base64 = g_base64.getValue();
        }
    }

    public static class RingSignature extends DynamicStruct {
        public String startValue;

        public List<String> ringValues;

        public String tag;

        public RingSignature(String startValue, List<String> ringValues, String tag) {
            super(new org.web3j.abi.datatypes.Utf8String(startValue), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(ringValues, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.Utf8String(tag));
            this.startValue = startValue;
            this.ringValues = ringValues;
            this.tag = tag;
        }

        public RingSignature(Utf8String startValue, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> ringValues, Utf8String tag) {
            super(startValue, ringValues, tag);
            this.startValue = startValue.getValue();
            this.ringValues = ringValues.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.tag = tag.getValue();
        }
    }

    public static class Vote extends DynamicStruct {
        public List<String> voteContent;

        public List<String> voterEncryptedAnswers;

        public RingSignature ringSignature;

        public Vote(List<String> voteContent, List<String> voterEncryptedAnswers, RingSignature ringSignature) {
            super(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(voteContent, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(voterEncryptedAnswers, org.web3j.abi.datatypes.Utf8String.class)), 
                    ringSignature);
            this.voteContent = voteContent;
            this.voterEncryptedAnswers = voterEncryptedAnswers;
            this.ringSignature = ringSignature;
        }

        public Vote(@Parameterized(type = Utf8String.class) DynamicArray<Utf8String> voteContent, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> voterEncryptedAnswers, RingSignature ringSignature) {
            super(voteContent, voterEncryptedAnswers, ringSignature);
            this.voteContent = voteContent.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.voterEncryptedAnswers = voterEncryptedAnswers.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.ringSignature = ringSignature;
        }
    }
}
