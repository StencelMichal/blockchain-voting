package com.stencel.evoting.smartcontracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.reflection.Parameterized;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class VotingState extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50612340806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806388cea9521161008c578063c53187c111610066578063c53187c114610261578063caafd5c21461026b578063e3c763cb14610287578063fe290ccb146102b7576100ea565b806388cea952146102095780639486baae14610239578063c19d93fb14610243576100ea565b80633d4b9204116100c85780633d4b92041461015b5780633ff302641461018b5780635df81330146101bb5780637a6c21fa146101eb576100ea565b806309bd5a60146100ef5780632333c6e01461010f5780633a2649281461012b575b600080fd5b6100f76102d5565b60405161010693929190611161565b60405180910390f35b61012960048036038101906101249190611548565b610382565b005b610145600480360381019061014091906115bd565b6104d6565b604051610152919061163f565b60405180910390f35b61017560048036038101906101709190611702565b610582565b604051610182919061177a565b60405180910390f35b6101a560048036038101906101a091906117d2565b6106c3565b6040516101b2919061163f565b60405180910390f35b6101d560048036038101906101d091906115bd565b6108e0565b6040516101e29190611969565b60405180910390f35b6101f3610b15565b604051610200919061198b565b60405180910390f35b610223600480360381019061021e91906115bd565b610b1b565b604051610230919061163f565b60405180910390f35b610241610bc7565b005b61024b610c2e565b6040516102589190611a1d565b60405180910390f35b610269610c41565b005b61028560048036038101906102809190611ac0565b610c43565b005b6102a1600480360381019061029c9190611b4b565b610cc5565b6040516102ae919061163f565b60405180910390f35b6102bf610eea565b6040516102cc9190611c1a565b60405180910390f35b60018060000180546102e690611c6b565b80601f016020809104026020016040519081016040528092919081815260200182805461031290611c6b565b801561035f5780601f106103345761010080835404028352916020019161035f565b820191906000526020600020905b81548152906001019060200180831161034257829003601f168201915b5050505050908060010160009054906101000a900460ff16908060020154905083565b600754816000015151146103cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c290611ce8565b60405180910390fd5b60098054905081602001515114610417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040e90611d54565b60405180910390fd5b6000819080600181540180825580915050600190039060005260206000209060050201600090919091909150600082015181600001908051906020019061045f929190610fc3565b50602082015181600101908051906020019061047c929190610fc3565b50604082015181600201600082015181600001908161049b9190611f20565b5060208201518160010190805190602001906104b8929190610fc3565b5060408201518160020190816104ce9190611f20565b505050505050565b600481815481106104e657600080fd5b90600052602060002001600091509050805461050190611c6b565b80601f016020809104026020016040519081016040528092919081815260200182805461052d90611c6b565b801561057a5780601f1061054f5761010080835404028352916020019161057a565b820191906000526020600020905b81548152906001019060200180831161055d57829003601f168201915b505050505081565b606081518351146105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf9061203e565b60405180910390fd5b6000835167ffffffffffffffff8111156105e5576105e46111b8565b5b6040519080825280601f01601f1916602001820160405280156106175781602001600182028036833780820191505090505b50905060005b84518110156106b8578381815181106106395761063861205e565b5b602001015160f81c60f81b8582815181106106575761065661205e565b5b602001015160f81c60f81b188282815181106106765761067561205e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806106b0906120bc565b91505061061d565b508091505092915050565b60606000600260206106d59190612111565b60ff1667ffffffffffffffff8111156106f1576106f06111b8565b5b6040519080825280601f01601f1916602001820160405280156107235781602001600182028036833780820191505090505b50905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060005b602060ff168110156108b6578182518683602081106107855761078461205e565b5b1a60f81b60f81c60ff16610799919061217d565b815181106107aa576107a961205e565b5b602001015160f81c60f81b836002836107c391906121ae565b815181106107d4576107d361205e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508182518683602081106108195761081861205e565b5b1a60f81b60f81c60ff1661082d91906121f0565b8151811061083e5761083d61205e565b5b602001015160f81c60f81b83600160028461085991906121ae565b6108639190612221565b815181106108745761087361205e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806108ae906120bc565b915050610763565b50816040516020016108c891906122e8565b60405160208183030381529060405292505050919050565b600081815481106108f057600080fd5b90600052602060002090600502016000915090508060020160405180606001604052908160008201805461092390611c6b565b80601f016020809104026020016040519081016040528092919081815260200182805461094f90611c6b565b801561099c5780601f106109715761010080835404028352916020019161099c565b820191906000526020600020905b81548152906001019060200180831161097f57829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610a765783829060005260206000200180546109e990611c6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1590611c6b565b8015610a625780601f10610a3757610100808354040283529160200191610a62565b820191906000526020600020905b815481529060010190602001808311610a4557829003601f168201915b5050505050815260200190600101906109ca565b505050508152602001600282018054610a8e90611c6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610aba90611c6b565b8015610b075780601f10610adc57610100808354040283529160200191610b07565b820191906000526020600020905b815481529060010190602001808311610aea57829003601f168201915b505050505081525050905081565b60075481565b60098181548110610b2b57600080fd5b906000526020600020016000915090508054610b4690611c6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7290611c6b565b8015610bbf5780601f10610b9457610100808354040283529160200191610bbf565b820191906000526020600020905b815481529060010190602001808311610ba257829003601f168201915b505050505081565b600067ffffffffffffffff811115610be257610be16111b8565b5b604051908082528060200260200182016040528015610c1557816020015b6060815260200190600190039081610c005790505b5060049080519060200190610c2b929190610fc3565b50565b600860009054906101000a900460ff1681565b565b8260056000820151816000019081610c5b9190611f20565b506020820151816001019081610c719190611f20565b509050506007546007819055508060099080519060200190610c94929190610fc3565b506001600860006101000a81548160ff02191690836002811115610cbb57610cba6119a6565b5b0217905550505050565b6060600060028351610cd791906121ae565b67ffffffffffffffff811115610cf057610cef6111b8565b5b6040519080825280601f01601f191660200182016040528015610d225781602001600182028036833780820191505090505b50905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060005b8451811015610ec057818251868381518110610d8157610d8061205e565b5b602001015160f81c60f81b60f81c60ff16610d9c919061217d565b81518110610dad57610dac61205e565b5b602001015160f81c60f81b83600283610dc691906121ae565b81518110610dd757610dd661205e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818251868381518110610e1c57610e1b61205e565b5b602001015160f81c60f81b60f81c60ff16610e3791906121f0565b81518110610e4857610e4761205e565b5b602001015160f81c60f81b836001600284610e6391906121ae565b610e6d9190612221565b81518110610e7e57610e7d61205e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610eb8906120bc565b915050610d62565b5081604051602001610ed291906122e8565b60405160208183030381529060405292505050919050565b60606004805480602002602001604051908101604052809291908181526020016000905b82821015610fba578382906000526020600020018054610f2d90611c6b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5990611c6b565b8015610fa65780601f10610f7b57610100808354040283529160200191610fa6565b820191906000526020600020905b815481529060010190602001808311610f8957829003601f168201915b505050505081526020019060010190610f0e565b50505050905090565b82805482825590600052602060002090810192821561100b579160200282015b8281111561100a578251829081610ffa9190611f20565b5091602001919060010190610fe3565b5b509050611018919061101c565b5090565b5b8082111561103c57600081816110339190611040565b5060010161101d565b5090565b50805461104c90611c6b565b6000825580601f1061105e575061107d565b601f01602090049060005260206000209081019061107c9190611080565b5b50565b5b80821115611099576000816000905550600101611081565b5090565b600081519050919050565b600082825260208201905092915050565b60005b838110156110d75780820151818401526020810190506110bc565b60008484015250505050565b6000601f19601f8301169050919050565b60006110ff8261109d565b61110981856110a8565b93506111198185602086016110b9565b611122816110e3565b840191505092915050565b60008115159050919050565b6111428161112d565b82525050565b6000819050919050565b61115b81611148565b82525050565b6000606082019050818103600083015261117b81866110f4565b905061118a6020830185611139565b6111976040830184611152565b949350505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111f0826110e3565b810181811067ffffffffffffffff8211171561120f5761120e6111b8565b5b80604052505050565b600061122261119f565b905061122e82826111e7565b919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611258576112576111b8565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561128e5761128d6111b8565b5b611297826110e3565b9050602081019050919050565b82818337600083830152505050565b60006112c66112c184611273565b611218565b9050828152602081018484840111156112e2576112e161126e565b5b6112ed8482856112a4565b509392505050565b600082601f83011261130a57611309611238565b5b813561131a8482602086016112b3565b91505092915050565b60006113366113318461123d565b611218565b9050808382526020820190506020840283018581111561135957611358611269565b5b835b818110156113a057803567ffffffffffffffff81111561137e5761137d611238565b5b80860161138b89826112f5565b8552602085019450505060208101905061135b565b5050509392505050565b600082601f8301126113bf576113be611238565b5b81356113cf848260208601611323565b91505092915050565b6000606082840312156113ee576113ed6111b3565b5b6113f86060611218565b9050600082013567ffffffffffffffff81111561141857611417611233565b5b611424848285016112f5565b600083015250602082013567ffffffffffffffff81111561144857611447611233565b5b611454848285016113aa565b602083015250604082013567ffffffffffffffff81111561147857611477611233565b5b611484848285016112f5565b60408301525092915050565b6000606082840312156114a6576114a56111b3565b5b6114b06060611218565b9050600082013567ffffffffffffffff8111156114d0576114cf611233565b5b6114dc848285016113aa565b600083015250602082013567ffffffffffffffff811115611500576114ff611233565b5b61150c848285016113aa565b602083015250604082013567ffffffffffffffff8111156115305761152f611233565b5b61153c848285016113d8565b60408301525092915050565b60006020828403121561155e5761155d6111a9565b5b600082013567ffffffffffffffff81111561157c5761157b6111ae565b5b61158884828501611490565b91505092915050565b61159a81611148565b81146115a557600080fd5b50565b6000813590506115b781611591565b92915050565b6000602082840312156115d3576115d26111a9565b5b60006115e1848285016115a8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000611611826115ea565b61161b81856115f5565b935061162b8185602086016110b9565b611634816110e3565b840191505092915050565b600060208201905081810360008301526116598184611606565b905092915050565b600067ffffffffffffffff82111561167c5761167b6111b8565b5b611685826110e3565b9050602081019050919050565b60006116a56116a084611661565b611218565b9050828152602081018484840111156116c1576116c061126e565b5b6116cc8482856112a4565b509392505050565b600082601f8301126116e9576116e8611238565b5b81356116f9848260208601611692565b91505092915050565b60008060408385031215611719576117186111a9565b5b600083013567ffffffffffffffff811115611737576117366111ae565b5b611743858286016116d4565b925050602083013567ffffffffffffffff811115611764576117636111ae565b5b611770858286016116d4565b9150509250929050565b6000602082019050818103600083015261179481846110f4565b905092915050565b6000819050919050565b6117af8161179c565b81146117ba57600080fd5b50565b6000813590506117cc816117a6565b92915050565b6000602082840312156117e8576117e76111a9565b5b60006117f6848285016117bd565b91505092915050565b600082825260208201905092915050565b600061181b826115ea565b61182581856117ff565b93506118358185602086016110b9565b61183e816110e3565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006118818383611810565b905092915050565b6000602082019050919050565b60006118a182611849565b6118ab8185611854565b9350836020820285016118bd85611865565b8060005b858110156118f957848403895281516118da8582611875565b94506118e583611889565b925060208a019950506001810190506118c1565b50829750879550505050505092915050565b600060608301600083015184820360008601526119288282611810565b915050602083015184820360208601526119428282611896565b9150506040830151848203604086015261195c8282611810565b9150508091505092915050565b60006020820190508181036000830152611983818461190b565b905092915050565b60006020820190506119a06000830184611152565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106119e6576119e56119a6565b5b50565b60008190506119f7826119d5565b919050565b6000611a07826119e9565b9050919050565b611a17816119fc565b82525050565b6000602082019050611a326000830184611a0e565b92915050565b600060408284031215611a4e57611a4d6111b3565b5b611a586040611218565b9050600082013567ffffffffffffffff811115611a7857611a77611233565b5b611a84848285016112f5565b600083015250602082013567ffffffffffffffff811115611aa857611aa7611233565b5b611ab4848285016112f5565b60208301525092915050565b600080600060608486031215611ad957611ad86111a9565b5b600084013567ffffffffffffffff811115611af757611af66111ae565b5b611b0386828701611a38565b9350506020611b14868287016115a8565b925050604084013567ffffffffffffffff811115611b3557611b346111ae565b5b611b41868287016113aa565b9150509250925092565b600060208284031215611b6157611b606111a9565b5b600082013567ffffffffffffffff811115611b7f57611b7e6111ae565b5b611b8b848285016116d4565b91505092915050565b600082825260208201905092915050565b6000611bb082611849565b611bba8185611b94565b935083602082028501611bcc85611865565b8060005b85811015611c085784840389528151611be98582611875565b9450611bf483611889565b925060208a01995050600181019050611bd0565b50829750879550505050505092915050565b60006020820190508181036000830152611c348184611ba5565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611c8357607f821691505b602082108103611c9657611c95611c3c565b5b50919050565b7f496e76616c696420766f746520636f6e74656e74206c656e6774680000000000600082015250565b6000611cd2601b836115f5565b9150611cdd82611c9c565b602082019050919050565b60006020820190508181036000830152611d0181611cc5565b9050919050565b7f496e76616c696420616e7377657273206c656e67746800000000000000000000600082015250565b6000611d3e6016836115f5565b9150611d4982611d08565b602082019050919050565b60006020820190508181036000830152611d6d81611d31565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611dd67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d99565b611de08683611d99565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611e1d611e18611e1384611148565b611df8565b611148565b9050919050565b6000819050919050565b611e3783611e02565b611e4b611e4382611e24565b848454611da6565b825550505050565b600090565b611e60611e53565b611e6b818484611e2e565b505050565b5b81811015611e8f57611e84600082611e58565b600181019050611e71565b5050565b601f821115611ed457611ea581611d74565b611eae84611d89565b81016020851015611ebd578190505b611ed1611ec985611d89565b830182611e70565b50505b505050565b600082821c905092915050565b6000611ef760001984600802611ed9565b1980831691505092915050565b6000611f108383611ee6565b9150826002028217905092915050565b611f29826115ea565b67ffffffffffffffff811115611f4257611f416111b8565b5b611f4c8254611c6b565b611f57828285611e93565b600060209050601f831160018114611f8a5760008415611f78578287015190505b611f828582611f04565b865550611fea565b601f198416611f9886611d74565b60005b82811015611fc057848901518255600182019150602085019450602081019050611f9b565b86831015611fdd5784890151611fd9601f891682611ee6565b8355505b6001600288020188555050505b505050505050565b7f417272617973206d757374206265206f6620657175616c206c656e6774680000600082015250565b6000612028601e836115f5565b915061203382611ff2565b602082019050919050565b600060208201905081810360008301526120578161201b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120c782611148565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120f9576120f861208d565b5b600182019050919050565b600060ff82169050919050565b600061211c82612104565b915061212783612104565b925082820261213581612104565b91508082146121475761214661208d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061218882611148565b915061219383611148565b9250826121a3576121a261214e565b5b828204905092915050565b60006121b982611148565b91506121c483611148565b92508282026121d281611148565b915082820484148315176121e9576121e861208d565b5b5092915050565b60006121fb82611148565b915061220683611148565b9250826122165761221561214e565b5b828206905092915050565b600061222c82611148565b915061223783611148565b925082820190508082111561224f5761224e61208d565b5b92915050565b600081905092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b6000612296600283612255565b91506122a182612260565b600282019050919050565b600081905092915050565b60006122c28261109d565b6122cc81856122ac565b93506122dc8185602086016110b9565b80840191505092915050565b60006122f382612289565b91506122ff82846122b7565b91508190509291505056fea2646970667358221220b768bcf7cb76f82c97950feff04e53ffe79c1b421cb77a75b2fe166a2a16ae4e64736f6c63430008110033";

    public static final String FUNC_CANDIDATESAMOUNT = "candidatesAmount";

    public static final String FUNC_CLEARLOGS = "clearLogs";

    public static final String FUNC_GETLOGS = "getLogs";

    public static final String FUNC_HASH = "hash";

    public static final String FUNC_ITOHEX = "iToHex";

    public static final String FUNC_ITOHEX2 = "iToHex2";

    public static final String FUNC_INITIALIZEVOTING = "initializeVoting";

    public static final String FUNC_LOGGER = "logger";

    public static final String FUNC_STATE = "state";

    public static final String FUNC_TESTBIGNUMBERS = "testBigNumbers";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_VOTERQUESTIONS = "voterQuestions";

    public static final String FUNC_VOTES = "votes";

    public static final String FUNC_XORBYTEARRAYS = "xorByteArrays";

    @Deprecated
    protected VotingState(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VotingState(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VotingState(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VotingState(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> candidatesAmount() {
        final Function function = new Function(FUNC_CANDIDATESAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> clearLogs() {
        final Function function = new Function(
                FUNC_CLEARLOGS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getLogs() {
        final Function function = new Function(FUNC_GETLOGS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<byte[], Boolean, BigInteger>> hash() {
        final Function function = new Function(FUNC_HASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<byte[], Boolean, BigInteger>>(function,
                new Callable<Tuple3<byte[], Boolean, BigInteger>>() {
                    @Override
                    public Tuple3<byte[], Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], Boolean, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> iToHex(byte[] buffer) {
        final Function function = new Function(FUNC_ITOHEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(buffer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> iToHex2(byte[] buffer) {
        final Function function = new Function(FUNC_ITOHEX2, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(buffer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initializeVoting(PaillierPublicKey key, BigInteger _candidatesAmount, List<String> _voterQuestions) {
        final Function function = new Function(
                FUNC_INITIALIZEVOTING, 
                Arrays.<Type>asList(key, 
                new org.web3j.abi.datatypes.generated.Uint256(_candidatesAmount), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_voterQuestions, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> logger(BigInteger param0) {
        final Function function = new Function(FUNC_LOGGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> state() {
        final Function function = new Function(FUNC_STATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> testBigNumbers() {
        final Function function = new Function(
                FUNC_TESTBIGNUMBERS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(Vote newVote) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(newVote), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> voterQuestions(BigInteger param0) {
        final Function function = new Function(FUNC_VOTERQUESTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<RingSignature> votes(BigInteger param0) {
        final Function function = new Function(FUNC_VOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<RingSignature>() {}));
        return executeRemoteCallSingleValueReturn(function, RingSignature.class);
    }

    public RemoteFunctionCall<byte[]> xorByteArrays(byte[] arr1, byte[] arr2) {
        final Function function = new Function(FUNC_XORBYTEARRAYS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(arr1), 
                new org.web3j.abi.datatypes.DynamicBytes(arr2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    @Deprecated
    public static VotingState load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingState(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VotingState load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingState(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VotingState load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VotingState(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VotingState load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VotingState(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VotingState> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingState.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VotingState> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingState.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<VotingState> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingState.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VotingState> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingState.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class PaillierPublicKey extends DynamicStruct {
        public String n_base64;

        public String g_base64;

        public PaillierPublicKey(String n_base64, String g_base64) {
            super(new org.web3j.abi.datatypes.Utf8String(n_base64), 
                    new org.web3j.abi.datatypes.Utf8String(g_base64));
            this.n_base64 = n_base64;
            this.g_base64 = g_base64;
        }

        public PaillierPublicKey(Utf8String n_base64, Utf8String g_base64) {
            super(n_base64, g_base64);
            this.n_base64 = n_base64.getValue();
            this.g_base64 = g_base64.getValue();
        }
    }

    public static class RingSignature extends DynamicStruct {
        public String startValue;

        public List<String> ringValues;

        public String tag;

        public RingSignature(String startValue, List<String> ringValues, String tag) {
            super(new org.web3j.abi.datatypes.Utf8String(startValue), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(ringValues, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.Utf8String(tag));
            this.startValue = startValue;
            this.ringValues = ringValues;
            this.tag = tag;
        }

        public RingSignature(Utf8String startValue, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> ringValues, Utf8String tag) {
            super(startValue, ringValues, tag);
            this.startValue = startValue.getValue();
            this.ringValues = ringValues.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.tag = tag.getValue();
        }
    }

    public static class Vote extends DynamicStruct {
        public List<String> voteContent;

        public List<String> voterEncryptedAnswers;

        public RingSignature ringSignature;

        public Vote(List<String> voteContent, List<String> voterEncryptedAnswers, RingSignature ringSignature) {
            super(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(voteContent, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(voterEncryptedAnswers, org.web3j.abi.datatypes.Utf8String.class)), 
                    ringSignature);
            this.voteContent = voteContent;
            this.voterEncryptedAnswers = voterEncryptedAnswers;
            this.ringSignature = ringSignature;
        }

        public Vote(@Parameterized(type = Utf8String.class) DynamicArray<Utf8String> voteContent, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> voterEncryptedAnswers, RingSignature ringSignature) {
            super(voteContent, voterEncryptedAnswers, ringSignature);
            this.voteContent = voteContent.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.voterEncryptedAnswers = voterEncryptedAnswers.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.ringSignature = ringSignature;
        }
    }
}
