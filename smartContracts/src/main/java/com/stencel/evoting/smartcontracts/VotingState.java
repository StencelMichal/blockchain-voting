package com.stencel.evoting.smartcontracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.reflection.Parameterized;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class VotingState extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040516200332838038062003328833981810160405281019062000037919062000117565b6000600260006101000a81548160ff0219169083600281111562000060576200005f62000149565b5b021790555080600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000178565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000df82620000b2565b9050919050565b620000f181620000d2565b8114620000fd57600080fd5b50565b6000815190506200011181620000e6565b92915050565b60006020828403121562000130576200012f620000ad565b5b6000620001408482850162000100565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6131a080620001886000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b56e54f011610097578063cfb62dee11610066578063cfb62dee146102c4578063dd725e90146102e2578063e561f8c4146102fe578063f6b238c31461030857610100565b8063b56e54f01461023d578063be92aeb61461026e578063c19d93fb1461028a578063c1b3f899146102a857610100565b80635df81330116100d35780635df81330146101a1578063851b6ef2146101d157806388cea952146101ef57806399a6a9eb1461021f57610100565b806306a49fce146101055780633477ee2e146101235780633a264928146101535780633bcd436114610183575b600080fd5b61010d610327565b60405161011a9190611c37565b60405180910390f35b61013d60048036038101906101389190611ca3565b6104b3565b60405161014a9190611d1a565b60405180910390f35b61016d60048036038101906101689190611ca3565b61055f565b60405161017a9190611d1a565b60405180910390f35b61018b61060b565b6040516101989190611e37565b60405180910390f35b6101bb60048036038101906101b69190611ca3565b6106fc565b6040516101c89190611f3d565b60405180910390f35b6101d9610931565b6040516101e691906120f7565b60405180910390f35b61020960048036038101906102049190611ca3565b610e20565b6040516102169190611d1a565b60405180910390f35b610227610ecc565b6040516102349190611c37565b60405180910390f35b61025760048036038101906102529190611ca3565b611058565b604051610265929190612119565b60405180910390f35b6102886004803603810190610283919061230e565b61119c565b005b6102926112d1565b60405161029f91906123ce565b60405180910390f35b6102c260048036038101906102bd9190612770565b6112e4565b005b6102cc61150e565b6040516102d99190612856565b60405180910390f35b6102fc60048036038101906102f79190612a11565b61151a565b005b610306611750565b005b610310611882565b60405161031e929190612119565b60405180910390f35b60606001600281111561033d5761033c612357565b5b600260009054906101000a900460ff16600281111561035f5761035e612357565b5b148061039d575060028081111561037957610378612357565b5b600260009054906101000a900460ff16600281111561039b5761039a612357565b5b145b6103dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d390612acc565b60405180910390fd5b6004805480602002602001604051908101604052809291908181526020016000905b828210156104aa57838290600052602060002001805461041d90612b1b565b80601f016020809104026020016040519081016040528092919081815260200182805461044990612b1b565b80156104965780601f1061046b57610100808354040283529160200191610496565b820191906000526020600020905b81548152906001019060200180831161047957829003601f168201915b5050505050815260200190600101906103fe565b50505050905090565b600481815481106104c357600080fd5b9060005260206000200160009150905080546104de90612b1b565b80601f016020809104026020016040519081016040528092919081815260200182805461050a90612b1b565b80156105575780601f1061052c57610100808354040283529160200191610557565b820191906000526020600020905b81548152906001019060200180831161053a57829003601f168201915b505050505081565b600a818154811061056f57600080fd5b90600052602060002001600091509050805461058a90612b1b565b80601f01602080910402602001604051908101604052809291908181526020018280546105b690612b1b565b80156106035780601f106105d857610100808354040283529160200191610603565b820191906000526020600020905b8154815290600101906020018083116105e657829003601f168201915b505050505081565b6106136119a4565b60028081111561062657610625612357565b5b600260009054906101000a900460ff16600281111561064857610647612357565b5b14610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90612bbe565b60405180910390fd5b600760405180604001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156106ee57602002820191906000526020600020905b8154815260200190600101908083116106da575b505050505081525050905090565b6006818154811061070c57600080fd5b90600052602060002090600602016000915090508060030160405180606001604052908160008201805461073f90612b1b565b80601f016020809104026020016040519081016040528092919081815260200182805461076b90612b1b565b80156107b85780601f1061078d576101008083540402835291602001916107b8565b820191906000526020600020905b81548152906001019060200180831161079b57829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b8282101561089257838290600052602060002001805461080590612b1b565b80601f016020809104026020016040519081016040528092919081815260200182805461083190612b1b565b801561087e5780601f106108535761010080835404028352916020019161087e565b820191906000526020600020905b81548152906001019060200180831161086157829003601f168201915b5050505050815260200190600101906107e6565b5050505081526020016002820180546108aa90612b1b565b80601f01602080910402602001604051908101604052809291908181526020018280546108d690612b1b565b80156109235780601f106108f857610100808354040283529160200191610923565b820191906000526020600020905b81548152906001019060200180831161090657829003601f168201915b505050505081525050905081565b606060028081111561094657610945612357565b5b600260009054906101000a900460ff16600281111561096857610967612357565b5b146109a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099f90612bbe565b60405180910390fd5b6006805480602002602001604051908101604052809291908181526020016000905b82821015610e17578382906000526020600020906006020160405180608001604052908160008201805480602002602001604051908101604052809291908181526020016000905b82821015610abe578382906000526020600020018054610a3190612b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5d90612b1b565b8015610aaa5780601f10610a7f57610100808354040283529160200191610aaa565b820191906000526020600020905b815481529060010190602001808311610a8d57829003601f168201915b505050505081526020019060010190610a12565b50505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610b1557602002820191906000526020600020905b815481526020019060010190808311610b01575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610bef578382906000526020600020018054610b6290612b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8e90612b1b565b8015610bdb5780601f10610bb057610100808354040283529160200191610bdb565b820191906000526020600020905b815481529060010190602001808311610bbe57829003601f168201915b505050505081526020019060010190610b43565b50505050815260200160038201604051806060016040529081600082018054610c1790612b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4390612b1b565b8015610c905780601f10610c6557610100808354040283529160200191610c90565b820191906000526020600020905b815481529060010190602001808311610c7357829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015610d6a578382906000526020600020018054610cdd90612b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0990612b1b565b8015610d565780601f10610d2b57610100808354040283529160200191610d56565b820191906000526020600020905b815481529060010190602001808311610d3957829003601f168201915b505050505081526020019060010190610cbe565b505050508152602001600282018054610d8290612b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054610dae90612b1b565b8015610dfb5780601f10610dd057610100808354040283529160200191610dfb565b820191906000526020600020905b815481529060010190602001808311610dde57829003601f168201915b50505050508152505081525050815260200190600101906109ca565b50505050905090565b60038181548110610e3057600080fd5b906000526020600020016000915090508054610e4b90612b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7790612b1b565b8015610ec45780601f10610e9957610100808354040283529160200191610ec4565b820191906000526020600020905b815481529060010190602001808311610ea757829003601f168201915b505050505081565b606060016002811115610ee257610ee1612357565b5b600260009054906101000a900460ff166002811115610f0457610f03612357565b5b1480610f425750600280811115610f1e57610f1d612357565b5b600260009054906101000a900460ff166002811115610f4057610f3f612357565b5b145b610f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7890612acc565b60405180910390fd5b6003805480602002602001604051908101604052809291908181526020016000905b8282101561104f578382906000526020600020018054610fc290612b1b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fee90612b1b565b801561103b5780601f106110105761010080835404028352916020019161103b565b820191906000526020600020905b81548152906001019060200180831161101e57829003601f168201915b505050505081526020019060010190610fa3565b50505050905090565b6005818154811061106857600080fd5b906000526020600020906002020160009150905080600001805461108b90612b1b565b80601f01602080910402602001604051908101604052809291908181526020018280546110b790612b1b565b80156111045780601f106110d957610100808354040283529160200191611104565b820191906000526020600020905b8154815290600101906020018083116110e757829003601f168201915b50505050509080600101805461111990612b1b565b80601f016020809104026020016040519081016040528092919081815260200182805461114590612b1b565b80156111925780601f1061116757610100808354040283529160200191611192565b820191906000526020600020905b81548152906001019060200180831161117557829003601f168201915b5050505050905082565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461122c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122390612c50565b60405180910390fd5b60028081111561123f5761123e612357565b5b600260009054906101000a900460ff16600281111561126157611260612357565b5b146112a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129890612bbe565b60405180910390fd5b8060076000820151816000015560208201518160010190805190602001906112ca9291906119be565b5090505050565b600260009054906101000a900460ff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136b90612c50565b60405180910390fd5b6000600281111561138857611387612357565b5b600260009054906101000a900460ff1660028111156113aa576113a9612357565b5b146113ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e190612ce2565b60405180910390fd5b836000808201518160000190816114019190612eae565b5060208201518160010190816114179190612eae565b509050508260049080519060200190611431929190611a0b565b508160039080519060200190611448929190611a0b565b5060005b81518110156114dc57600582828151811061146a57611469612f80565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190816114b09190612eae565b5060208201518160010190816114c69190612eae565b50505080806114d490612fde565b91505061144c565b506001600260006101000a81548160ff0219169083600281111561150357611502612357565b5b021790555050505050565b60078060000154905081565b6001600281111561152e5761152d612357565b5b600260009054906101000a900460ff1660028111156115505761154f612357565b5b14611590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158790612acc565b60405180910390fd5b600480549050816000015151146115dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d390613072565b60405180910390fd5b60038054905081604001515114611628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161f906130de565b60405180910390fd5b80602001515181600001515114611674576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166b9061314a565b60405180910390fd5b600681908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000190805190602001906116bc929190611a0b565b5060208201518160010190805190602001906116d99291906119be565b5060408201518160020190805190602001906116f6929190611a0b565b5060608201518160030160008201518160000190816117159190612eae565b506020820151816001019080519060200190611732929190611a0b565b5060408201518160020190816117489190612eae565b505050505050565b6001600281111561176457611763612357565b5b600260009054906101000a900460ff16600281111561178657611785612357565b5b146117c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bd90612acc565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611856576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184d90612c50565b60405180910390fd5b60028060006101000a81548160ff0219169083600281111561187b5761187a612357565b5b0217905550565b600080600001805461189390612b1b565b80601f01602080910402602001604051908101604052809291908181526020018280546118bf90612b1b565b801561190c5780601f106118e15761010080835404028352916020019161190c565b820191906000526020600020905b8154815290600101906020018083116118ef57829003601f168201915b50505050509080600101805461192190612b1b565b80601f016020809104026020016040519081016040528092919081815260200182805461194d90612b1b565b801561199a5780601f1061196f5761010080835404028352916020019161199a565b820191906000526020600020905b81548152906001019060200180831161197d57829003601f168201915b5050505050905082565b604051806040016040528060008152602001606081525090565b8280548282559060005260206000209081019282156119fa579160200282015b828111156119f95782518255916020019190600101906119de565b5b509050611a079190611a64565b5090565b828054828255906000526020600020908101928215611a53579160200282015b82811115611a52578251829081611a429190612eae565b5091602001919060010190611a2b565b5b509050611a609190611a81565b5090565b5b80821115611a7d576000816000905550600101611a65565b5090565b5b80821115611aa15760008181611a989190611aa5565b50600101611a82565b5090565b508054611ab190612b1b565b6000825580601f10611ac35750611ae2565b601f016020900490600052602060002090810190611ae19190611a64565b5b50565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b4b578082015181840152602081019050611b30565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b7382611b11565b611b7d8185611b1c565b9350611b8d818560208601611b2d565b611b9681611b57565b840191505092915050565b6000611bad8383611b68565b905092915050565b6000602082019050919050565b6000611bcd82611ae5565b611bd78185611af0565b935083602082028501611be985611b01565b8060005b85811015611c255784840389528151611c068582611ba1565b9450611c1183611bb5565b925060208a01995050600181019050611bed565b50829750879550505050505092915050565b60006020820190508181036000830152611c518184611bc2565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611c8081611c6d565b8114611c8b57600080fd5b50565b600081359050611c9d81611c77565b92915050565b600060208284031215611cb957611cb8611c63565b5b6000611cc784828501611c8e565b91505092915050565b600082825260208201905092915050565b6000611cec82611b11565b611cf68185611cd0565b9350611d06818560208601611b2d565b611d0f81611b57565b840191505092915050565b60006020820190508181036000830152611d348184611ce1565b905092915050565b611d4581611c6d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611d838383611d3c565b60208301905092915050565b6000602082019050919050565b6000611da782611d4b565b611db18185611d56565b9350611dbc83611d67565b8060005b83811015611ded578151611dd48882611d77565b9750611ddf83611d8f565b925050600181019050611dc0565b5085935050505092915050565b6000604083016000830151611e126000860182611d3c565b5060208301518482036020860152611e2a8282611d9c565b9150508091505092915050565b60006020820190508181036000830152611e518184611dfa565b905092915050565b600082825260208201905092915050565b6000611e7582611ae5565b611e7f8185611e59565b935083602082028501611e9185611b01565b8060005b85811015611ecd5784840389528151611eae8582611ba1565b9450611eb983611bb5565b925060208a01995050600181019050611e95565b50829750879550505050505092915050565b60006060830160008301518482036000860152611efc8282611b68565b91505060208301518482036020860152611f168282611e6a565b91505060408301518482036040860152611f308282611b68565b9150508091505092915050565b60006020820190508181036000830152611f578184611edf565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006060830160008301518482036000860152611fa88282611b68565b91505060208301518482036020860152611fc28282611e6a565b91505060408301518482036040860152611fdc8282611b68565b9150508091505092915050565b600060808301600083015184820360008601526120068282611e6a565b915050602083015184820360208601526120208282611d9c565b9150506040830151848203604086015261203a8282611e6a565b915050606083015184820360608601526120548282611f8b565b9150508091505092915050565b600061206d8383611fe9565b905092915050565b6000602082019050919050565b600061208d82611f5f565b6120978185611f6a565b9350836020820285016120a985611f7b565b8060005b858110156120e557848403895281516120c68582612061565b94506120d183612075565b925060208a019950506001810190506120ad565b50829750879550505050505092915050565b600060208201905081810360008301526121118184612082565b905092915050565b600060408201905081810360008301526121338185611ce1565b905081810360208301526121478184611ce1565b90509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61218d82611b57565b810181811067ffffffffffffffff821117156121ac576121ab612155565b5b80604052505050565b60006121bf611c59565b90506121cb8282612184565b919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156121f5576121f4612155565b5b602082029050602081019050919050565b600080fd5b600061221e612219846121da565b6121b5565b9050808382526020820190506020840283018581111561224157612240612206565b5b835b8181101561226a57806122568882611c8e565b845260208401935050602081019050612243565b5050509392505050565b600082601f830112612289576122886121d5565b5b813561229984826020860161220b565b91505092915050565b6000604082840312156122b8576122b7612150565b5b6122c260406121b5565b905060006122d284828501611c8e565b600083015250602082013567ffffffffffffffff8111156122f6576122f56121d0565b5b61230284828501612274565b60208301525092915050565b60006020828403121561232457612323611c63565b5b600082013567ffffffffffffffff81111561234257612341611c68565b5b61234e848285016122a2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061239757612396612357565b5b50565b60008190506123a882612386565b919050565b60006123b88261239a565b9050919050565b6123c8816123ad565b82525050565b60006020820190506123e360008301846123bf565b92915050565b600080fd5b600067ffffffffffffffff82111561240957612408612155565b5b61241282611b57565b9050602081019050919050565b82818337600083830152505050565b600061244161243c846123ee565b6121b5565b90508281526020810184848401111561245d5761245c6123e9565b5b61246884828561241f565b509392505050565b600082601f830112612485576124846121d5565b5b813561249584826020860161242e565b91505092915050565b6000604082840312156124b4576124b3612150565b5b6124be60406121b5565b9050600082013567ffffffffffffffff8111156124de576124dd6121d0565b5b6124ea84828501612470565b600083015250602082013567ffffffffffffffff81111561250e5761250d6121d0565b5b61251a84828501612470565b60208301525092915050565b600067ffffffffffffffff82111561254157612540612155565b5b602082029050602081019050919050565b600061256561256084612526565b6121b5565b9050808382526020820190506020840283018581111561258857612587612206565b5b835b818110156125cf57803567ffffffffffffffff8111156125ad576125ac6121d5565b5b8086016125ba8982612470565b8552602085019450505060208101905061258a565b5050509392505050565b600082601f8301126125ee576125ed6121d5565b5b81356125fe848260208601612552565b91505092915050565b600067ffffffffffffffff82111561262257612621612155565b5b602082029050602081019050919050565b60006040828403121561264957612648612150565b5b61265360406121b5565b9050600082013567ffffffffffffffff811115612673576126726121d0565b5b61267f84828501612470565b600083015250602082013567ffffffffffffffff8111156126a3576126a26121d0565b5b6126af84828501612470565b60208301525092915050565b60006126ce6126c984612607565b6121b5565b905080838252602082019050602084028301858111156126f1576126f0612206565b5b835b8181101561273857803567ffffffffffffffff811115612716576127156121d5565b5b8086016127238982612633565b855260208501945050506020810190506126f3565b5050509392505050565b600082601f830112612757576127566121d5565b5b81356127678482602086016126bb565b91505092915050565b6000806000806080858703121561278a57612789611c63565b5b600085013567ffffffffffffffff8111156127a8576127a7611c68565b5b6127b48782880161249e565b945050602085013567ffffffffffffffff8111156127d5576127d4611c68565b5b6127e1878288016125d9565b935050604085013567ffffffffffffffff81111561280257612801611c68565b5b61280e878288016125d9565b925050606085013567ffffffffffffffff81111561282f5761282e611c68565b5b61283b87828801612742565b91505092959194509250565b61285081611c6d565b82525050565b600060208201905061286b6000830184612847565b92915050565b60006060828403121561288757612886612150565b5b61289160606121b5565b9050600082013567ffffffffffffffff8111156128b1576128b06121d0565b5b6128bd84828501612470565b600083015250602082013567ffffffffffffffff8111156128e1576128e06121d0565b5b6128ed848285016125d9565b602083015250604082013567ffffffffffffffff811115612911576129106121d0565b5b61291d84828501612470565b60408301525092915050565b60006080828403121561293f5761293e612150565b5b61294960806121b5565b9050600082013567ffffffffffffffff811115612969576129686121d0565b5b612975848285016125d9565b600083015250602082013567ffffffffffffffff811115612999576129986121d0565b5b6129a584828501612274565b602083015250604082013567ffffffffffffffff8111156129c9576129c86121d0565b5b6129d5848285016125d9565b604083015250606082013567ffffffffffffffff8111156129f9576129f86121d0565b5b612a0584828501612871565b60608301525092915050565b600060208284031215612a2757612a26611c63565b5b600082013567ffffffffffffffff811115612a4557612a44611c68565b5b612a5184828501612929565b91505092915050565b7f546869732066756e74696f6e206d61792062652063616c6c6564206f6e6c792060008201527f6f6e20766f74696e670000000000000000000000000000000000000000000000602082015250565b6000612ab6602983611cd0565b9150612ac182612a5a565b604082019050919050565b60006020820190508181036000830152612ae581612aa9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612b3357607f821691505b602082108103612b4657612b45612aec565b5b50919050565b7f546869732066756e74696f6e206d61792062652063616c6c6564206f6e6c792060008201527f6f6e2074616c6c79696e67000000000000000000000000000000000000000000602082015250565b6000612ba8602b83611cd0565b9150612bb382612b4c565b604082019050919050565b60006020820190508181036000830152612bd781612b9b565b9050919050565b7f4f6e6c7920626f6f746e6f64652063616e2063616c6c20746869732066756e6360008201527f74696f6e00000000000000000000000000000000000000000000000000000000602082015250565b6000612c3a602483611cd0565b9150612c4582612bde565b604082019050919050565b60006020820190508181036000830152612c6981612c2d565b9050919050565b7f546869732066756e74696f6e206d61792062652063616c6c6564206f6e6c792060008201527f6f6e20696e697469616c697a6174696f6e000000000000000000000000000000602082015250565b6000612ccc603183611cd0565b9150612cd782612c70565b604082019050919050565b60006020820190508181036000830152612cfb81612cbf565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d27565b612d6e8683612d27565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612dab612da6612da184611c6d565b612d86565b611c6d565b9050919050565b6000819050919050565b612dc583612d90565b612dd9612dd182612db2565b848454612d34565b825550505050565b600090565b612dee612de1565b612df9818484612dbc565b505050565b5b81811015612e1d57612e12600082612de6565b600181019050612dff565b5050565b601f821115612e6257612e3381612d02565b612e3c84612d17565b81016020851015612e4b578190505b612e5f612e5785612d17565b830182612dfe565b50505b505050565b600082821c905092915050565b6000612e8560001984600802612e67565b1980831691505092915050565b6000612e9e8383612e74565b9150826002028217905092915050565b612eb782611b11565b67ffffffffffffffff811115612ed057612ecf612155565b5b612eda8254612b1b565b612ee5828285612e21565b600060209050601f831160018114612f185760008415612f06578287015190505b612f108582612e92565b865550612f78565b601f198416612f2686612d02565b60005b82811015612f4e57848901518255600182019150602085019450602081019050612f29565b86831015612f6b5784890151612f67601f891682612e74565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fe982611c6d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361301b5761301a612faf565b5b600182019050919050565b7f496e76616c696420766f746520636f6e74656e74206c656e6774680000000000600082015250565b600061305c601b83611cd0565b915061306782613026565b602082019050919050565b6000602082019050818103600083015261308b8161304f565b9050919050565b7f496e76616c696420616e7377657273206c656e67746800000000000000000000600082015250565b60006130c8601683611cd0565b91506130d382613092565b602082019050919050565b600060208201905081810360008301526130f7816130bb565b9050919050565b7f496e76616c696420656e6372797074656420766f746573206c656e6774680000600082015250565b6000613134601e83611cd0565b915061313f826130fe565b602082019050919050565b6000602082019050818103600083015261316381613127565b905091905056fea264697066735822122082a851a78518c9e08e9aad9a0e7e8c892fbb356121787bf79d60fcee2311368764736f6c63430008110033";

    public static final String FUNC_CANDIDATES = "candidates";

    public static final String FUNC_CHANGESTATETOTALLYING = "changeStateToTallying";

    public static final String FUNC_COMMONENCRYPTIONKEY = "commonEncryptionKey";

    public static final String FUNC_GETALLVOTES = "getAllVotes";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_GETVOTERQUESTIONS = "getVoterQuestions";

    public static final String FUNC_INITIALIZEVOTING = "initializeVoting";

    public static final String FUNC_LOGGER = "logger";

    public static final String FUNC_PUBLISHVOTINGRESULTS = "publishVotingResults";

    public static final String FUNC_RETRIEVEVOTINGRESULTS = "retrieveVotingResults";

    public static final String FUNC_STATE = "state";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_VOTERQUESTIONS = "voterQuestions";

    public static final String FUNC_VOTERSPUBLICKEYS = "votersPublicKeys";

    public static final String FUNC_VOTES = "votes";

    public static final String FUNC_VOTINGRESULT = "votingResult";

    @Deprecated
    protected VotingState(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VotingState(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VotingState(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VotingState(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> candidates(BigInteger param0) {
        final Function function = new Function(FUNC_CANDIDATES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> changeStateToTallying() {
        final Function function = new Function(
                FUNC_CHANGESTATETOTALLYING, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, String>> commonEncryptionKey() {
        final Function function = new Function(FUNC_COMMONENCRYPTIONKEY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getAllVotes() {
        final Function function = new Function(FUNC_GETALLVOTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Vote>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getCandidates() {
        final Function function = new Function(FUNC_GETCANDIDATES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getVoterQuestions() {
        final Function function = new Function(FUNC_GETVOTERQUESTIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initializeVoting(PaillierPublicKey key, List<String> _candidates, List<String> _voterQuestions, List<RsaPublicKey> _votersPublicKeys) {
        final Function function = new Function(
                FUNC_INITIALIZEVOTING, 
                Arrays.<Type>asList(key, 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_candidates, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_voterQuestions, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.DynamicArray<RsaPublicKey>(RsaPublicKey.class, _votersPublicKeys)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> logger(BigInteger param0) {
        final Function function = new Function(FUNC_LOGGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> publishVotingResults(VotingResult result) {
        final Function function = new Function(
                FUNC_PUBLISHVOTINGRESULTS, 
                Arrays.<Type>asList(result), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<VotingResult> retrieveVotingResults() {
        final Function function = new Function(FUNC_RETRIEVEVOTINGRESULTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<VotingResult>() {}));
        return executeRemoteCallSingleValueReturn(function, VotingResult.class);
    }

    public RemoteFunctionCall<BigInteger> state() {
        final Function function = new Function(FUNC_STATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(Vote newVote) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(newVote), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> voterQuestions(BigInteger param0) {
        final Function function = new Function(FUNC_VOTERQUESTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<String, String>> votersPublicKeys(BigInteger param0) {
        final Function function = new Function(FUNC_VOTERSPUBLICKEYS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<RingSignature> votes(BigInteger param0) {
        final Function function = new Function(FUNC_VOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<RingSignature>() {}));
        return executeRemoteCallSingleValueReturn(function, RingSignature.class);
    }

    public RemoteFunctionCall<BigInteger> votingResult() {
        final Function function = new Function(FUNC_VOTINGRESULT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static VotingState load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingState(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VotingState load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingState(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VotingState load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VotingState(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VotingState load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VotingState(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VotingState> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _bootnodeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _bootnodeAddress)));
        return deployRemoteCall(VotingState.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<VotingState> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _bootnodeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _bootnodeAddress)));
        return deployRemoteCall(VotingState.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<VotingState> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _bootnodeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _bootnodeAddress)));
        return deployRemoteCall(VotingState.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<VotingState> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _bootnodeAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _bootnodeAddress)));
        return deployRemoteCall(VotingState.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class RingSignature extends DynamicStruct {
        public String startValue;

        public List<String> ringValues;

        public String tag;

        public RingSignature(String startValue, List<String> ringValues, String tag) {
            super(new org.web3j.abi.datatypes.Utf8String(startValue), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(ringValues, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.Utf8String(tag));
            this.startValue = startValue;
            this.ringValues = ringValues;
            this.tag = tag;
        }

        public RingSignature(Utf8String startValue, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> ringValues, Utf8String tag) {
            super(startValue, ringValues, tag);
            this.startValue = startValue.getValue();
            this.ringValues = ringValues.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.tag = tag.getValue();
        }
    }

    public static class PaillierPublicKey extends DynamicStruct {
        public String n_base64;

        public String g_base64;

        public PaillierPublicKey(String n_base64, String g_base64) {
            super(new org.web3j.abi.datatypes.Utf8String(n_base64), 
                    new org.web3j.abi.datatypes.Utf8String(g_base64));
            this.n_base64 = n_base64;
            this.g_base64 = g_base64;
        }

        public PaillierPublicKey(Utf8String n_base64, Utf8String g_base64) {
            super(n_base64, g_base64);
            this.n_base64 = n_base64.getValue();
            this.g_base64 = g_base64.getValue();
        }
    }

    public static class RsaPublicKey extends DynamicStruct {
        public String modulus_base64;

        public String exponent_base64;

        public RsaPublicKey(String modulus_base64, String exponent_base64) {
            super(new org.web3j.abi.datatypes.Utf8String(modulus_base64), 
                    new org.web3j.abi.datatypes.Utf8String(exponent_base64));
            this.modulus_base64 = modulus_base64;
            this.exponent_base64 = exponent_base64;
        }

        public RsaPublicKey(Utf8String modulus_base64, Utf8String exponent_base64) {
            super(modulus_base64, exponent_base64);
            this.modulus_base64 = modulus_base64.getValue();
            this.exponent_base64 = exponent_base64.getValue();
        }
    }

    public static class VotingResult extends DynamicStruct {
        public BigInteger totalVotes;

        public List<BigInteger> votes;

        public VotingResult(BigInteger totalVotes, List<BigInteger> votes) {
            super(new org.web3j.abi.datatypes.generated.Uint256(totalVotes), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                            org.web3j.abi.datatypes.generated.Uint256.class,
                            org.web3j.abi.Utils.typeMap(votes, org.web3j.abi.datatypes.generated.Uint256.class)));
            this.totalVotes = totalVotes;
            this.votes = votes;
        }

        public VotingResult(Uint256 totalVotes, @Parameterized(type = Uint256.class) DynamicArray<Uint256> votes) {
            super(totalVotes, votes);
            this.totalVotes = totalVotes.getValue();
            this.votes = votes.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
        }
    }

    public static class Vote extends DynamicStruct {
        public List<String> encryptedVotes;

        public List<BigInteger> encryptedExponents;

        public List<String> voterEncryptedAnswers;

        public RingSignature ringSignature;

        public Vote(List<String> encryptedVotes, List<BigInteger> encryptedExponents, List<String> voterEncryptedAnswers, RingSignature ringSignature) {
            super(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(encryptedVotes, org.web3j.abi.datatypes.Utf8String.class)), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                            org.web3j.abi.datatypes.generated.Uint256.class,
                            org.web3j.abi.Utils.typeMap(encryptedExponents, org.web3j.abi.datatypes.generated.Uint256.class)), 
                    new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                            org.web3j.abi.datatypes.Utf8String.class,
                            org.web3j.abi.Utils.typeMap(voterEncryptedAnswers, org.web3j.abi.datatypes.Utf8String.class)), 
                    ringSignature);
            this.encryptedVotes = encryptedVotes;
            this.encryptedExponents = encryptedExponents;
            this.voterEncryptedAnswers = voterEncryptedAnswers;
            this.ringSignature = ringSignature;
        }

        public Vote(@Parameterized(type = Utf8String.class) DynamicArray<Utf8String> encryptedVotes, @Parameterized(type = Uint256.class) DynamicArray<Uint256> encryptedExponents, @Parameterized(type = Utf8String.class) DynamicArray<Utf8String> voterEncryptedAnswers, RingSignature ringSignature) {
            super(encryptedVotes, encryptedExponents, voterEncryptedAnswers, ringSignature);
            this.encryptedVotes = encryptedVotes.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.encryptedExponents = encryptedExponents.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.voterEncryptedAnswers = voterEncryptedAnswers.getValue().stream().map(v -> v.getValue()).collect(Collectors.toList());
            this.ringSignature = ringSignature;
        }
    }
}
